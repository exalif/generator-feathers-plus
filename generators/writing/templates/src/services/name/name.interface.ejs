
// Define TypeScript interface for service `<%= serviceName %>`. (Can be re-generated.)
<%# --- if-1 starts below. -%>
<% if (generateTypeScriptEnums && (typescriptEnumsImportsStr && typescriptEnumsImportsStr.length > 0) || (existingTypescriptEnumsImportsArr && existingTypescriptEnumsImportsArr.length > 0)) { -%>
// Import required enums
<% } -%>
<%# --- if-1 ends above. -%>
<%# --- if-2 starts below. -%>
<% if (generateTypeScriptEnums && typescriptEnumsImportsStr && typescriptEnumsImportsStr.length > 0) { -%>
<%- tplTsOnly([`import {${typescriptEnumsImportsStr} } from '../../${subFolderReverse}models/enums'${sc}`, '', '']) -%>
<% } -%>
<%# --- if-2 ends above. -%>
<%# --- if-3 starts below. -%>
<% if (generateTypeScriptEnums && existingTypescriptEnumsImportsArr && existingTypescriptEnumsImportsArr.length > 0) { -%>
<%# --- foreach-1 starts below. -%>
<% existingTypescriptEnumsImportsArr.forEach(function(existingEnum) { -%>
<%# --- if-4 starts below. -%>
<% if (existingEnum.relativePath) { -%>
<%- tplTsOnly([`import {${existingEnum.enumName} } from '../../${subFolderReverse}models/${existingEnum.enumPath}'${sc}`, '', '']) -%>
<% } else { -%>
<%- tplTsOnly([`import {${existingEnum.enumName} } from '${existingEnum.enumPath}'${sc}`, '', '']) -%>
<% } -%>
<%# --- if-4 ends above. -%>
<% }) -%>
<%# --- foreach-1 ends above. -%>
<% } -%>
<%# --- if-3 ends above. -%>
<%- insertFragment('imports') %>
<%- insertFragment('init') %>

<% __name = upperFirst(specs.services[camelName].nameSingular) -%>
// tslint:disable-next-line:no-empty-interface
export interface <%- __name %>Base {
  <%- insertFragment('interface', typescriptTypesStr) %>
}

// tslint:disable-next-line:no-empty-interface
export interface <%- __name %> extends <%- __name %>Base {
  <%- insertFragment('more', typescriptExtendsStr) %>
}

<%- insertFragment('funcs') %>
<%- insertFragment('end') %>
