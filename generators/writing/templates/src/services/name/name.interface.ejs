
// Define TypeScript interface for service `<%= serviceName %>`. (Can be re-generated.)
<%# --- if-1 starts below. -%>
<% if (generateTypeScriptEnums && typescriptEnumsImportsStr && typescriptEnumsImportsStr.length > 0) { -%>
// Import required enums
<%- tplTsOnly([`import {${typescriptEnumsImportsStr} } from '../../${subFolderReverse}models/enums'${sc}`, '', '']) -%>
<% } -%>
<%# --- if-2 starts below. -%>
<% if (generateTypeScriptEnums && existingTypescriptEnumsImportsArr && existingTypescriptEnumsImportsArr.length > 0) { -%>
  <% existingTypescriptEnumsImportsArr.forEach(function(existingEnum) { -%>
    <% if (existingEnum.relativePath) { -%>
      <%- tplTsOnly([`import {${existingEnum.enumName} } from '../../${subFolderReverse}models/${existingEnum.enumPath}'${sc}`, '', '']) -%>
    <% } else { -%>
      <%- tplTsOnly([`import {${existingEnum.enumName} } from '${existingEnum.enumPath}'${sc}`, '', '']) -%>
    <% } -%>
  <% }) -%>
<% } -%>
<%# --- if-2 ends above. -%>
<%- insertFragment('imports') %>
<%- insertFragment('init') %>

<% __name = upperFirst(specs.services[camelName].nameSingular) -%>
// tslint:disable-next-line:no-empty-interface
export interface <%- __name %>Base {
  <%- insertFragment('interface', typescriptTypesStr) %>
}

// tslint:disable-next-line:no-empty-interface
export interface <%- __name %> extends <%- __name %>Base {
  <%- insertFragment('more', typescriptExtendsStr) %>
}

<%- insertFragment('funcs') %>
<%- insertFragment('end') %>
